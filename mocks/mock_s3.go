// Code generated by MockGen. DO NOT EDIT.
// Source: ./s3.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockS3Api is a mock of S3Api interface
type MockS3Api struct {
	ctrl     *gomock.Controller
	recorder *MockS3ApiMockRecorder
}

// MockS3ApiMockRecorder is the mock recorder for MockS3Api
type MockS3ApiMockRecorder struct {
	mock *MockS3Api
}

// NewMockS3Api creates a new mock instance
func NewMockS3Api(ctrl *gomock.Controller) *MockS3Api {
	mock := &MockS3Api{ctrl: ctrl}
	mock.recorder = &MockS3ApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockS3Api) EXPECT() *MockS3ApiMockRecorder {
	return m.recorder
}

// ListAllKeys mocks base method
func (m *MockS3Api) ListAllKeys(bucketName, prefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllKeys", bucketName, prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllKeys indicates an expected call of ListAllKeys
func (mr *MockS3ApiMockRecorder) ListAllKeys(bucketName, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllKeys", reflect.TypeOf((*MockS3Api)(nil).ListAllKeys), bucketName, prefix)
}

// BatchUpload mocks base method
func (m *MockS3Api) BatchUpload(bucketName, prefix string, uploadPaths []string, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpload", bucketName, prefix, uploadPaths, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpload indicates an expected call of BatchUpload
func (mr *MockS3ApiMockRecorder) BatchUpload(bucketName, prefix, uploadPaths, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpload", reflect.TypeOf((*MockS3Api)(nil).BatchUpload), bucketName, prefix, uploadPaths, description)
}
